REACT:
React is a libarary used to build front end
React is a SPA(single page application) application
React is a component based architecture

adv:
1. Easy to build  applications  when compared to angular/other frameworks
2. VDOM->virtual DOM(donot loads the entire page only loads the changes made to the page)

why vite?
    1.gives more dependencies
    2.does not have report hurdles folder(that causes the project not to work on updation)
    3.does not have a build folder that can be easily replicated ,easy to crack the original folders
    4.if react is replaced with angular it can be changed to angular project

folder structure
1.node_modules(installs all the dependencies to the repo in this folder) 
2.public
      |
      ->vite.svg
3.src
    |
    ->assets
           |
           ->react.svg
    |
    ->app.css(styling)
    |
    ->app.jsx(component)
    |
    ->index.css(styling)
    |
    ->main.css(component)
4.gitignore (ignores these files while pushing)
5.index.html(starting point of the project)
6.package.json(inportant file denotes it is a node project)
7.package.lock.json(locks the dependencies)
8.vite.config.js


components:
    1.class(not in use)
    2.functional
       eg:
       function home(){
        return (
            <div>
            <h1>welcome to react</h1>
            <h2>fc</h2>
            </div>
        )
       }
       export default home;  (only then it can be recognized)

inline styling:
export default Home;
function Home(){
    return (
        <div>
            <h1 style={{textAlign:"center"}}>home page</h1>
        </div>
    )
}
export default Home;

internal styling:
function Home(){
    var styling={
        textAlign:"center",
        backgroundColor:"blue",
        color:"white"
    }
    return (
        <div>
            <h1 style={styling}>home page</h1>
        </div>
    )
}
export default Home;

external styling:
under css folder->Navbar.css:
nav{
    display: flex;
}

Navbar.jsx:
import '../css/Navbar.css'
const Navbar=()=>{
    return(
        <header>
            <nav>
                <li>Home</li>
                <li>About</li>
                <li>Gallery</li>
                <li>contact</li>
                <li>signup</li>
            </nav>
        </header>
    )
}
export default Navbar;

props:
*properties that you want to poss to your component from the component call
*they are immutable 

method 1:
function Home(){
    var styling={
        textAlign:"center",
        backgroundColor:"blue",
        color:"white"
    }
    var a=10;
    return (
        <div>
            <h1 style={styling}>home page</h1>
            <h2>i am going to pass props in the next tag</h2>
            <h3>props : {a} </h3>     {}-js
            {/* <h3>props:{styling.backgroundColor}</h3> */}
        </div>
    )
}
export default Home;

method 2:
app.jsx:
function App() {
  return (
      <main>
        <Navbar></Navbar>
         <Home properties="sjit" sjit="Hello"></Home><hr></hr>
         <About></About><hr></hr>
         <Form></Form><hr></hr>
         <Gallery></Gallery><hr></hr>
         <Skills></Skills><hr></hr>
      </main>
  )
}
export default App;

home.jsx:
function Home(properties){
    var styling={
        textAlign:"center",
        backgroundColor:"blue",
        color:"white"
    }
    var a=10;
    return (
        <div>
            <h1 style={styling}>home page</h1>
            <h2>i am going to pass props in the next tag</h2>
            <h3>props : {a} </h3>  
            <h3>props:{styling.backgroundColor}</h3>
            <h3>props:{properties.sjit},{properties.properties}</h3>  
        </div>
    )
}

note:
variables should always be displayed above return

state:
*it is mutable (changed during runtime)
*everything in your state will be handled by component
*if we want to handle/change the state we are dependent on hook-usestate() & event handling.

export default About;     ////automatically imported when useState is given
import { useState } from "react";

function About(){
    var initialVal=0;
    var[num,setNum] =useState(initialVal)     //[]-contains two variables 1-num 2-dispatch func
    function handleDecrement(){   // event handling         |
        setNum(num-1);                                      |->external funtion method 1
    }                                                       |
    return (
        <div>
            <h1>About page</h1>
            <h3>state intitial value is:{initialVal}</h3>
            <h3>updating state:{num}</h3>
            <button onClick={handleDecrement}>-</button>       //event handlig function called  //onclick-event handler
            <button onClick={()=>{setNum(num+1)}}>+</button>    //handled by anonymous function
        </div>
    )
}
export default About;


props vs state:
props:                                                     state:
1.immutable                                              1.mutable
2.has no control on component                            2.has control over component
3.should be passed only when component call is hapening  3.state can be passed inside component itself
4.props are passed as obj                                4.are also passed as obj  
5.props will not create infinite loop                    5.can create infinite loop if state func has no control

react routers:
1.install react-router-dom ---->npm i react-router-dom
2.browser router 
        |
        ->browser router
        |
        ->routes

hooks:
1.usestate
2.useeffect
3.useref
4.usememo
5.usecallback
6.usereducer
7.custom hooks


1.usestate:

const [isDropdownVisible, setDropdownVisible] = useState(false);

<div
          className="dropdown"
          onMouseEnter={() => setDropdownVisible(true)}      //onClick(!isDropdownVisible)->but every tym to not show the dropdown agn the hook has to be clicked
          onMouseLeave={() => setDropdownVisible(false)}     //onMouseOver->only displays the content will not be able to click
        >
          <span className="link">Hooks</span>
          {isDropdownVisible && (
            <ol className="dropdown-menu">
              <li>
                <Link to="/use-effect" className="link">UseEffect</Link>
              </li>
              <li>
                <Link to="/use-ref" className="link">UseRef</Link>
              </li>
            </ol>
          )}
        </div>

2.useEffect:
useEffect(()=>{},[])-syntax
          |       |
    callback    dependencies
API:
to connect frontend and backend(to get data or put data at definite places)
https://jsonplaceholder.typicode.com/->static api (cannot manipulate data)

1.get-fetch      |
2.properties     | 
3.put            |   ---> asios   
4.patch          |
5.update         | 
6.delete         |
installed uing npm:npm i axios   (ques:how are the dependencies get aligned?->alphabetical order)



import { useEffect, useState } from "react";
import axios from "axios";

const UseEffectAPI = () => {
  const [posts, setPost] = useState([]);

  useEffect(() => {
    axios                                                          |
      .get("https://jsonplaceholder.typicode.com/posts")           |   //get data from the link
      .then((res) => {                                             | -->useeffect for api calls
        setPost(res.data);                                         |  //sets the data to posts
      })                                                           |
      .catch((err) => console.log("Couldn't fetch data:", err));   |   //handles error
  }, []);
  useEffect(() => {
    console.log(posts);
  }, [posts]);

  return (
    <div>
      <h1>This is useEffect example with API</h1>
      <h2>We are going to fetch data from JSON placeholder and display it</h2>
      <ol>
        {posts.map((post) => (                        |--->maps many data 
          <li key={post.id}>{post.title}</li>         |--->sets the keys for each data while printing  
        ))}                                           |
      </ol>                                           |
      <button
        onClick={() => {
          console.log("button clicked");
        }}
      >
        hello
      </button>
    </div>
  );
};

export default UseEffectAPI;

3.useref:
storing and feetching the previous renders
syntax:
var value=useRef();


import { useEffect, useRef, useState } from "react";
const UseRef = () => {
  var [text, setText] = useState("");
  const [count, setCount] = useState(0);
  const prevCount = useRef(null);
  var previousRender=useRef();
  useEffect(() => {
    prevCount.current = count; 
  }, [count]);
  useEffect(()=>{previousRender.current=text;
    console.log(previousRender.current);
  },[text])
  return (
    <div>
      <h1>This is useRef example</h1>
      Type your text :{" "}
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
      />
      <h2>This is current render is:{text}</h2>
      <h2>This is previous render is:{previousRender.current}</h2><hr></hr>
      <p>Current Count: {count}</p>
      <p>Previous Count: {prevCount.current}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
};
export default UseRef;


4.usememo:
utilize to store a value in cache memory
used to optimize webpage
memorizes the function

syntax:
var value=useMemo(function,[dependencies])


import { useState, useMemo } from "react";
function slowFunction(num){
    for(var i=0;i<1000000;i++){}
    return num*2
}
const UseMemo = () => {
  var [number, setNumber] = useState(0);
  var [theme, setTheme] = useState(false);
  var styling={
    backgroundColor: theme ? "black" : "pink",
    color: theme ? "pink" : "black",
  }
  var doublingUpANumber=useMemo(()=>{
    return slowFunction(number)
  },[number])
  return (
    <>
    <button onClick={()=>setTheme(!theme)}>toggle theme</button>
    <div style={styling}>
      <h1>this is use memo</h1>
      Number box:{""}
      <input
        type="number"
        value={number}
        onChange={(e) => {
          setNumber(e.target.value);
        }}
      ></input>
      <h2>the number is:{number}</h2>
      <h2>the number is: {doublingUpANumber}</h2>
    </div>
    </>
  );
};
export default UseMemo;

deployment:
npm i build
npm run preview
versel deploy

5.usecallback
utilized to store the complete function int he cache memory which gives greater optimization

syntax:
var functionName=usecallback(callbackFunction,[dependencies])
import { useState, useCallback } from "react";

const UseCallback = () => {
  var [number, setNumber] = useState(0);
  var [theme, setTheme] = useState(false);
  var styling={
    backgroundColor: theme ? "black" : "pink",
    color: theme ? "pink" : "black",
  }
  var numList=useCallback((mul)=>{    // numlist is a function
    return [number+mul*2,number+mul*4,number+mul*8]
  },[number])
  return (
    <>
    <button onClick={()=>setTheme(!theme)}>toggle theme</button>
    <div style={styling}>
      <h1>this is useCallback</h1>
      Number box:{""}
      <input
        type="number"
        value={number}
        onChange={(e) => {
          setNumber(parseInt(e.target.value));        //type number only restricts the string but it is of type string
        }}
      ></input>
    <h2>the number list is </h2>
    {numList(10).map((val,index)=>(<h2 key={index}>{val}</h2>))}   //in an object first the value is stored and then its corres inde is stored
    </div>
    </>
  );
};
export default UseCallback;


6.useMemoize-custom hook 
mocks useState

import { useState } from "react"
const useMemoize=(key,value)=>{   
    var [text,setText]=useState(()=>{                  //writes a anonymous function to define the useState
        var jsonValue=localStorage.getItem(key)       // gets the item from localStorage
    })
    useEffect(()=>{                               // if value not present in localStorage 
    localStorage.setItem(key,value)
  },[key,value])
}
export default useMemoize